00001  0000             ; NUMBER FORMAT
00002  0001             ; SIID DDDD
00003  0001             ; SIGNED 8-BIT FIXED POINT NUMBER
00004  0001             ; BITMAP SCREEN
00005  0001             ; 10 SYS8192
00006  0001             
00007  0001             *=$0801
00008  0801             
00009  0801  0B 08 0A              BYTE    $0B, $08, $0A, $00, $9E, $38, $31, $39, $32, $00, $00, $00
00010  080D             
00011  080D             MEMORYSETUP = $D018
00012  080D             CHARACTERSET = $3000
00013  080D             
00014  080D             *=$1000
00015  1000             ; VARIABLES
00016  1000             TEMP
00017  1000  00                    BYTE    $00
00018  1001             TEMP2
00019  1001  00                    BYTE    $00
00020  1002             COUNTER
00021  1002  00                    BYTE    $00
00022  1003             XPIXEL
00023  1003  FF                    BYTE    $FF
00024  1004             YPIXEL
00025  1004  00                    BYTE    $00
00026  1005             ITERATIONS 
00027  1005  00                    BYTE    $00
00028  1006             PIXELCOUNTER 
00029  1006  00                    BYTE    $00
00030  1007             CX
00031  1007  00                    BYTE    $00
00032  1008             CY
00033  1008  00                    BYTE    $00
00034  1009             ZX
00035  1009  00                    BYTE    $00
00036  100A             ZY
00037  100A  00                    BYTE    $00
00038  100B             ITERATOR
00039  100B  00                    BYTE    $00
00040  100C             ;
00041  100C             ; SIGNED DIVISION ROUTINE
00042  100C             ; BIG SHOUTOUT TO THIS PAGE
00043  100C             ; HTTP://6502.ORG/TUTORIALS/COMPARE_INSTRUCTIONS.HTML
00044  100C             SIGNEDDIVIDE ; A / TEMP
00045  100C  48                    PHA
00046  100D  A9 00                 LDA     #00
00047  100F  8D 02 10              STA     COUNTER
00048  1012  68                    PLA
00049  1013             SIGNEDDIVIDELOOP 
00050  1013  CD 00 10              CMP     TEMP    ; CHECK IF TEMP < A
00051  1016  30 0B                 BMI     SIGNEDDIVIDEEND; IF IT IS, END < A
00052  1018  F0 09                 BEQ     SIGNEDDIVIDEEND; IF IT IS, END
00053  101A  ED 00 10              SBC     TEMP    ; IF IT ISN'T SUBTRACT
00054  101D  EE 02 10              INC     COUNTER ; INCREMENT COUNTER
00055  1020  4C 13 10              JMP     SIGNEDDIVIDELOOP; RETURN TO CHECK
00056  1023             SIGNEDDIVIDEEND ; IF DIVISION COMPLETE
00057  1023  8D 00 10              STA     TEMP    ; STORE REMAINDER IN TEMP
00058  1026  AD 02 10              LDA     COUNTER ; STORE DIVISON RESULT IN A
00059  1029  60                    RTS
00060  102A             
00061  102A             ;
00062  102A             ; UNSIGNED DIVISION ROUTINE
00063  102A             ; BIG SHOUTOUT TO THIS PAGE
00064  102A             ; HTTP://6502.ORG/TUTORIALS/COMPARE_INSTRUCTIONS.HTML
00065  102A             UNSIGNEDDIVIDE ; A / TEMP
00066  102A  48                    PHA
00067  102B  A9 00                 LDA     #00
00068  102D  8D 02 10              STA     COUNTER
00069  1030  68                    PLA
00070  1031             UNSIGNEDDIVIDELOOP 
00071  1031  CD 00 10              CMP     TEMP    ; CHECK IF TEMP < A
00072  1034  90 0B                 BCC     UNSIGNEDDIVIDEEND; IF IT IS, END < A
00073  1036  F0 09                 BEQ     UNSIGNEDDIVIDEEND; IF IT IS, END
00074  1038  ED 00 10              SBC     TEMP    ; IF IT ISN'T SUBTRACT
00075  103B  EE 02 10              INC     COUNTER ; INCREMENT COUNTER
00076  103E  4C 31 10              JMP     UNSIGNEDDIVIDELOOP; RETURN TO CHECK
00077  1041             UNSIGNEDDIVIDEEND ; IF DIVISION COMPLETE
00078  1041  8D 00 10              STA     TEMP    ; STORE REMAINDER IN TEMP
00079  1044  AD 02 10              LDA     COUNTER ; STORE DIVISON RESULT IN A
00080  1047  60                    RTS
00081  1048             ;
00082  1048             ; MULTIPLICATION ROUTINE
00083  1048             ; COULD BE MADE MORE EFFICIENT BY CHECKING WHICH ONE IS SMALLER BEFOREHAND
00084  1048             MULTIPLY   ; A*TEMP
00085  1048  8D 01 10              STA TEMP2
00086  104B             MULTIPLYLOOP 
00087  104B  CE 00 10              DEC TEMP        ; DECREMENT TEMP
00088  104E  F0 06                 BEQ MULTIPLYEND ; CHECK IF TEMP == 0
00089  1050  6D 01 10              ADC TEMP2
00090  1053  4C 4B 10              JMP MULTIPLYLOOP
00091  1056             MULTIPLYEND 
00092  1056  60                    RTS
00093  1057             
00094  1057             ;
00095  1057             ; DRAW BOX OF CHARACTERS
00096  1057             SCREENFILL 
00097  1057  A2 00                 LDX #00
00098  1059  A0 00                 LDY #00
00099  105B             SCREENLOOP ; SELF MODIFYING CODE TO ADC #40 TO THE ADDRESS?
00100  105B  98                    TYA
00101  105C  9D 00 04              STA $0400,X
00102  105F             
00103  105F  69 10                 ADC #16
00104  1061  9D 28 04              STA $0428,X
00105  1064             
00106  1064  69 10                 ADC #16
00107  1066  9D 50 04              STA $0450,X
00108  1069             
00109  1069  69 10                 ADC #16
00110  106B  9D 78 04              STA $0478,X
00111  106E             
00112  106E  69 10                 ADC #16
00113  1070  9D A0 04              STA $04A0,X
00114  1073             
00115  1073  69 10                 ADC #16
00116  1075  9D C8 04              STA $04C8,X
00117  1078             
00118  1078  69 10                 ADC #16
00119  107A  9D F0 04              STA $04F0,X
00120  107D             
00121  107D  69 10                 ADC #16
00122  107F  9D 18 05              STA $0518,X
00123  1082             
00124  1082  69 10                 ADC #16
00125  1084  9D 40 05              STA $0540,X
00126  1087             
00127  1087  69 10                 ADC #16
00128  1089  9D 68 05              STA $0568,X
00129  108C             
00130  108C  69 10                 ADC #16
00131  108E  9D 90 05              STA $0590,X
00132  1091             
00133  1091  69 10                 ADC #16
00134  1093  9D B8 05              STA $05B8,X
00135  1096             
00136  1096  69 10                 ADC #16
00137  1098  9D E0 05              STA $05E0,X
00138  109B             
00139  109B  69 10                 ADC #16
00140  109D  9D 08 06              STA $0608,X
00141  10A0             
00142  10A0  69 10                 ADC #16
00143  10A2  9D 30 06              STA $0630,X
00144  10A5             
00145  10A5  69 10                 ADC #16
00146  10A7  9D 58 06              STA $0658,X
00147  10AA             
00148  10AA  69 11                 ADC #17
00149  10AC  A8                    TAY
00150  10AD             ; CHECK IF ALL COLLUMNS HAVE BEEN DRAWN
00151  10AD  E8                    INX
00152  10AE  8A                    TXA
00153  10AF  C9 10                 CMP #16
00154  10B1  D0 A8                 BNE SCREENLOOP
00155  10B3  60                    RTS
00156  10B4             
00157  10B4             ; DRAW PIXEL ROUTINE
00158  10B4             DRAWPIXEL
00159  10B4                        ;
00160  10B4                        ;  XX YY
00161  10B4                        ;  || ||
00162  10B4                        ;  VV VV
00163  10B4                        ;
00164  10B4                        ; $3Y XY X <- PIXEL IN CHARACTER
00165  10B4                        ;  || ||
00166  10B4                        ;  || |+----> LINE IN CHARACTER
00167  10B4                        ;  || +-----> HORIZONTAL TILE
00168  10B4                        ;  |+-------> VERTICAL TILE
00169  10B4                        ;  +--------> ADDRESS
00170  10B4                        ;
00171  10B4                        ; E.G.
00172  10B4                        ; $3015 = 0X01TH CHARACTER OF 0X00TH LINE, 5TH SUB-LINE
00173  10B4                        ;
00174  10B4                        ;LDA $00
00175  10B4                        ;LSR A
00176  10B4                        ;LSR A
00177  10B4                        ;LSR A
00178  10B4                        ;LSR A
00179  10B4                        ;ORA $30 ; DO THE UPPER BYTE
00180  10B4                        ;STA MODIFYTHIS+2
00181  10B4                        ; AAA
00182  10B4  A9 55                 LDA #85
00183  10B6             ;MODIFYTHIS
00184  10B6  20 BD 10              JSR MANDELBROT
00185  10B9  8D 00 31              STA CHARACTERSET+$0100
00186  10BC                        ;STA CHARACTERSET
00187  10BC                        ; WILL REQUIRE SELF MODIFYING CODE
00188  10BC                        ; WILL DRAW WHICHEVER PIXEL IS CURRENTLY BEING POINTED AT
00189  10BC                        ; BY XPIXEL & YPIXEL
00190  10BC                        ; PROBABLY SOMETHING WHERE IT'S CMP'D WITH A MINIMUM VALUE, THEN
00191  10BC                        ; BITSHIFT LEFT OF THE RELEVANT LINE, OR #01,
00192  10BC                        ; UNTIL THE CHARACTER LINE IS FINISHED
00193  10BC  60                    RTS
00194  10BD             
00195  10BD             MANDELBROT 
00196  10BD  A2 00                 LDX #00
00197  10BF             MANDELLOOP 
00198  10BF                        ;TXA ; WHY DOES THIS NOT WORK???
00199  10BF  9D 00 30              STA CHARACTERSET,X
00200  10C2  E8                    INX
00201  10C3  D0 FA                 BNE MANDELLOOP
00202  10C5  60                    RTS
00203  10C6             
00204  10C6             *=$2000
00205  2000             ; MAIN LOOP
00206  2000             MAIN
00207  2000  A9 00                 LDA #00   ; LOAD 0(BLACK)
00208  2002  8D 20 D0              STA $D020 ; CHANGE BORDER TO BLACK
00209  2005  8D 21 D0              STA $D021 ; CHANGE BG0 TO BLACK
00210  2008                        ; REDEFINE CHARACTER SET LOCATION
00211  2008  AD 18 D0              LDA MEMORYSETUP
00212  200B  29 F0                 AND #240
00213  200D  09 0C                 ORA #12
00214  200F  8D 18 D0              STA MEMORYSETUP
00215  2012                        ; FILL SCREEN WITH CHARACTERS
00216  2012  20 57 10              JSR SCREENFILL
00217  2015                        ; DRAW THAT SHIT
00218  2015                        ;JSR MANDELBROT
00219  2015  20 B4 10              JSR DRAWPIXEL
00220  2018  4C 1B 20              JMP     FREEZE
00221  201B             
00222  201B             FREEZE
00223  201B  4C 1B 20              JMP FREEZE
00224  201E             

******* 28 Label(s) *******
counter = $1002 
cx = $1007 
cy = $1008 
DRAWPIXEL = $10B4 
FREEZE = $201B 
iterations = $1005 
iterator = $100B 
MAIN = $2000 
MANDELBROT = $10BD 
MANDELLOOP = $10BF 
MULTIPLY = $1048 
MULTIPLYEND = $1056 
MULTIPLYLOOP = $104B 
pixelcounter = $1006 
SCREENFILL = $1057 
SCREENLOOP = $105B 
SIGNEDDIVIDE = $100C 
SIGNEDDIVIDEEND = $1023 
SIGNEDDIVIDELOOP = $1013 
temp = $1000 
temp2 = $1001 
UNSIGNEDDIVIDE = $102A 
UNSIGNEDDIVIDEEND = $1041 
UNSIGNEDDIVIDELOOP = $1031 
xPixel = $1003 
yPixel = $1004 
zx = $1009 
zy = $100A 

******* 13 Unused label(s) *******
cx
cy
iterations
iterator
MAIN
MULTIPLY
pixelcounter
SIGNEDDIVIDE
UNSIGNEDDIVIDE
xPixel
yPixel
zx
zy

******* 3 Variable(s) *******
CHARACTERSET  = $3000
MEMORYSETUP  = $D018
tgt_c64  = $0001
******* 2 Unused variables(s) *******
CHARACTERSET
tgt_c64

